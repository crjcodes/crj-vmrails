---

# based on the official rvm ansible install at
#  https://github.com/rvm/rvm1-ansible

#=============================================
# FIRST, let's detect the existence of the rvm binary

- name: Detect rvm binary
  stat: 
    path: '{{ rvm1_rvm }}'
  register: rvm_binary_preinstalled

#=============================================
# SECOND, is the rvm installer present? 

- name: Detect rvm installer
  stat: 
    path: '{{ rvm1_temp_download_path }}/rvm-installer.sh'
  register: rvm_installer_preinstalled

# don't need to download the installer if the rvm binary is already here

- name: Install rvm installer
  get_url:
    url: '{{ rvm1_rvm_latest_installer }}'
    dest: '{{ rvm1_temp_download_path }}/rvm-installer.sh'
    mode: 0755
  when: 
    not rvm_installer_preinstalled.stat.exists and 
    not rvm_binary_preinstalled.stat.exists

- name: Import GPG keys from keyservers
  shell: 'gpg --batch --keyserver {{ item }} --recv-keys {{ rvm1_gpg_keys }}'
  changed_when: False
  check_mode: False
  with_items: '{{ rvm1_gpg_key_servers }}'
  register: gpg_import
  when: 
    not rvm_binary_preinstalled.stat.exists and 
    not ansible_check_mode and rvm1_gpg_keys != '' and 
    (gpg_import is not defined or gpg_import.rc != 0)
  ignore_errors: True

- name: Was GPG import from keyservers succesfull?
  set_fact: 
    gpg_imported_from: '{{ item.item }}'
  when: 
    not rvm_binary_preinstalled.stat.exists and 
    "'rc' in item and item.rc == 0"
  with_items: "{{ gpg_import.results }}"

- name: Import GPG keys from rvm.io, if keyservers failed
  shell: 'curl -sSL https://rvm.io/{{ item }} | gpg --batch --import -'
  with_items:
    - mpapis.asc
    - pkuczynski.asc
  when: 
    not rvm_binary_preinstalled.stat.exists and 
    not ansible_check_mode and rvm1_gpg_keys != '' and 
    gpg_imported_from is not defined

# Install rvm if not installed

# NOTE: this doesn't check if the installer is now present after the install;
# it's assumed 

- name: Install rvm
  shell: >
    {{ rvm1_temp_download_path }}/rvm-installer.sh {{ rvm1_rvm_version }}
    --path {{ rvm1_install_path }} {{ rvm1_install_flags }}
  when: 
    not rvm_binary_preinstalled.stat.exists

# Check again for the rvm binary to ensure the above installation worked
# but fail if it doesn't exist

- name: Detect rvm binary again
  stat: 
    path: '{{ rvm1_rvm }}'
  register: rvm_binary

- name: Write out message if no rvm binary at this point
  fail:
    msg: "Whoops! rvm binary not found after attempted installation"
  when: not rvm_binary.stat.exists

# Update rvm whether or not it was just installed or already present

- name: Update rvm
  shell: '{{ rvm1_rvm }} get {{ rvm1_rvm_version }} && {{ rvm1_rvm }} reload'
  changed_when: False
  when: rvm_binary.stat.exists and rvm1_rvm_check_for_updates

# shouldn't this happen on an update?  or just on a new install?
- name: Configure rvm
  command: '{{ rvm1_rvm }} autolibs {{ rvm1_autolib_mode }}'
  when: not rvm_binary_preinstalled.stat.exists
